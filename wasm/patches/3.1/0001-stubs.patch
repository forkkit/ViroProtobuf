From 6f50c0d575f1f7cc6fc49925c0c8a1f1be6dfd45 Mon Sep 17 00:00:00 2001
From: Robin <me@invokr.org>
Date: Fri, 7 Oct 2016 13:23:49 +0200
Subject: [PATCH 1/2] Add emscripten stubs

---
 3.1.0/src/google/protobuf/stubs/atomicops.h        |  5 +-
 .../stubs/atomicops_internals_emscripten.h         | 97 ++++++++++++++++++++++
 3.1.0/src/google/protobuf/stubs/common.cc          | 17 ++++
 3.1.0/src/google/protobuf/stubs/platform_macros.h  |  3 +
 3.1.0/src/google/protobuf/stubs/port.h             |  2 +-
 5 files changed, 122 insertions(+), 2 deletions(-)
 create mode 100644 3.1.0/src/google/protobuf/stubs/atomicops_internals_emscripten.h

diff --git a/3.1.0/src/google/protobuf/stubs/atomicops.h b/3.1.0/src/google/protobuf/stubs/atomicops.h
index 9b3d1e6..af7e1a5 100644
--- a/3.1.0/src/google/protobuf/stubs/atomicops.h
+++ b/3.1.0/src/google/protobuf/stubs/atomicops.h
@@ -175,8 +175,11 @@ Atomic64 Release_Load(volatile const Atomic64* ptr);
 #define GOOGLE_PROTOBUF_ATOMICOPS_ERROR \
 "Atomic operations are not supported on your platform"
 
+// Emscripten support
+#if defined(EMSCRIPTEN)
+#include <google/protobuf/stubs/atomicops_internals_emscripten.h>
 // ThreadSanitizer, http://clang.llvm.org/docs/ThreadSanitizer.html.
-#if defined(THREAD_SANITIZER)
+#elif defined(THREAD_SANITIZER)
 #include <google/protobuf/stubs/atomicops_internals_tsan.h>
 // MSVC.
 #elif defined(_MSC_VER)
diff --git a/3.1.0/src/google/protobuf/stubs/atomicops_internals_emscripten.h b/3.1.0/src/google/protobuf/stubs/atomicops_internals_emscripten.h
new file mode 100644
index 0000000..f6a2385
--- /dev/null
+++ b/3.1.0/src/google/protobuf/stubs/atomicops_internals_emscripten.h
@@ -0,0 +1,97 @@
+// This file is an internal atomic implementation, use atomicops.h instead.
+
+#ifndef GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_EMSCRIPTEN_H_
+#define GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_EMSCRIPTEN_H_
+
+namespace google {
+namespace protobuf {
+namespace internal {
+
+// 32-bit low-level operations on any platform.
+
+inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,
+                                         Atomic32 old_value,
+                                         Atomic32 new_value) {
+  Atomic32 old_reg = *ptr;
+  if (old_reg == old_value)
+    *ptr = new_value;
+
+  return old_reg;
+}
+
+inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,
+                                         Atomic32 new_value) {
+  Atomic32 prev = *ptr;
+  *ptr = new_value;
+  return prev;
+}
+
+inline Atomic32 NoBarrier_AtomicIncrement(volatile Atomic32* ptr,
+                                          Atomic32 increment) {
+  Atomic32 prev = *ptr;
+  *ptr = *ptr + increment;
+  return prev;
+}
+
+inline Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
+                                        Atomic32 increment) {
+ Atomic32 prev = *ptr;
+  *ptr = *ptr + increment;
+  return prev;
+}
+
+inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
+                                       Atomic32 old_value,
+                                       Atomic32 new_value) {
+  Atomic32 old_reg = *ptr;
+  if (old_reg == old_value)
+    *ptr = new_value;
+
+  return old_reg;
+}
+
+inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
+                                       Atomic32 old_value,
+                                       Atomic32 new_value) {
+  Atomic32 old_reg = *ptr;
+  if (old_reg == old_value)
+    *ptr = new_value;
+
+  return old_reg;
+}
+
+inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {
+  *ptr = value;
+}
+
+inline void MemoryBarrier() {
+
+}
+
+inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {
+    *ptr = value;
+}
+
+inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {
+  *ptr = value;
+}
+
+inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {
+  return *ptr;
+}
+
+inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {
+  Atomic32 value = *ptr;
+  return value;
+}
+
+inline Atomic32 Release_Load(volatile const Atomic32* ptr) {
+  return *ptr;
+}
+
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+
+#endif // GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_EMSCRIPTEN_H_
diff --git a/3.1.0/src/google/protobuf/stubs/common.cc b/3.1.0/src/google/protobuf/stubs/common.cc
index 54dbafa..3589548 100644
--- a/3.1.0/src/google/protobuf/stubs/common.cc
+++ b/3.1.0/src/google/protobuf/stubs/common.cc
@@ -47,6 +47,7 @@
 #define snprintf _snprintf    // see comment in strutil.cc
 #elif defined(HAVE_PTHREAD)
 #include <pthread.h>
+#elif defined(EMSCRIPTEN) // Emscripten doesnt have any threading support
 #else
 #error "No suitable threading library available."
 #endif
@@ -346,6 +347,22 @@ void Mutex::AssertHeld() {
 #endif
 }
 
+#elif defined(EMSCRIPTEN)
+
+struct Mutex::Internal {};
+
+Mutex::Mutex()
+ : mInternal(new Internal) {
+}
+
+Mutex::~Mutex() {}
+
+void Mutex::Lock() {}
+
+void Mutex::Unlock() {}
+
+void Mutex::AssertHeld() {}
+
 #elif defined(HAVE_PTHREAD)
 
 struct Mutex::Internal {
diff --git a/3.1.0/src/google/protobuf/stubs/platform_macros.h b/3.1.0/src/google/protobuf/stubs/platform_macros.h
index 4ba4b34..c13751d 100644
--- a/3.1.0/src/google/protobuf/stubs/platform_macros.h
+++ b/3.1.0/src/google/protobuf/stubs/platform_macros.h
@@ -53,6 +53,9 @@
 #elif defined(__aarch64__)
 #define GOOGLE_PROTOBUF_ARCH_AARCH64 1
 #define GOOGLE_PROTOBUF_ARCH_64_BIT 1
+#elif defined(EMSCRIPTEN)
+#define GOOGLE_PROTOBUF_ARCH_IA32 1
+#define GOOGLE_PROTOBUF_ARCH_32_BIT 1
 #elif defined(__MIPSEL__)
 #if defined(__LP64__)
 #define GOOGLE_PROTOBUF_ARCH_MIPS64 1
diff --git a/3.1.0/src/google/protobuf/stubs/port.h b/3.1.0/src/google/protobuf/stubs/port.h
index 376be5f..a37dfab 100644
--- a/3.1.0/src/google/protobuf/stubs/port.h
+++ b/3.1.0/src/google/protobuf/stubs/port.h
@@ -224,7 +224,7 @@ static const uint64 kuint64max = GOOGLE_ULONGLONG(0xFFFFFFFFFFFFFFFF);
 
 #if defined(__clang__) && defined(__has_cpp_attribute) \
     && !defined(GOOGLE_PROTOBUF_OS_APPLE)
-# if defined(GOOGLE_PROTOBUF_OS_NACL) || defined(EMSCRIPTEN) || \
+# if defined(GOOGLE_PROTOBUF_OS_NACL) || \
      __has_cpp_attribute(clang::fallthrough)
 #  define GOOGLE_FALLTHROUGH_INTENDED [[clang::fallthrough]]
 # endif
-- 
2.6.4 (Apple Git-63)

